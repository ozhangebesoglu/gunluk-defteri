import * as React from "react";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";
import { 
  BookOpen, 
  Calendar as CalendarIcon, 
  PenTool, 
  ChevronLeft, 
  ChevronRight,
  Plus,
  Clock
} from "lucide-react";
import { 
  format, 
  startOfToday, 
  startOfMonth, 
  endOfMonth, 
  eachDayOfInterval, 
  isSameMonth, 
  isToday, 
  isSameDay 
} from "date-fns";

function cn(...classes: (string | undefined | null | false)[]): string {
  return classes.filter(Boolean).join(' ');
}

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium transition-colors outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-sm shadow-black/5 hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground shadow-sm shadow-black/5 hover:bg-destructive/90",
        outline: "border border-input bg-background shadow-sm shadow-black/5 hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground shadow-sm shadow-black/5 hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-lg px-3 text-xs",
        lg: "h-10 rounded-lg px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
    );
  },
);
Button.displayName = "Button";

interface JournalEntry {
  id: string;
  title: string;
  content: string;
  date: Date;
  mood?: "happy" | "sad" | "neutral" | "excited" | "anxious";
}

interface JournalDashboardProps {
  entries?: JournalEntry[];
}

function JournalDashboard({ entries = [] }: JournalDashboardProps) {
  const today = startOfToday();
  const [selectedDate, setSelectedDate] = useState(today);
  const [currentMonth, setCurrentMonth] = useState(today);

  const defaultEntries: JournalEntry[] = [
    {
      id: "1",
      title: "Güzel Bir Gün",
      content: "Bugün harika bir gün geçirdim. Sabah erkenden kalktım ve doğa yürüyüşü yaptım...",
      date: new Date(2024, 0, 15),
      mood: "happy"
    },
    {
      id: "2", 
      title: "Düşüncelerim",
      content: "Hayat hakkında düşünüyorum. Bazen her şey çok karmaşık geliyor...",
      date: new Date(2024, 0, 12),
      mood: "neutral"
    },
    {
      id: "3",
      title: "Yeni Başlangıçlar",
      content: "Yeni projeme başladım. Çok heyecanlıyım ve umutluyum...",
      date: new Date(2024, 0, 10),
      mood: "excited"
    }
  ];

  const journalEntries = entries.length > 0 ? entries : defaultEntries;
  const recentEntries = journalEntries.slice(0, 5);

  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(currentMonth);
  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const previousMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));
  };

  const nextMonth = () => {
    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));
  };

  const getMoodColor = (mood?: string) => {
    switch (mood) {
      case "happy": return "bg-green-500";
      case "sad": return "bg-blue-500";
      case "excited": return "bg-yellow-500";
      case "anxious": return "bg-red-500";
      default: return "bg-gray-500";
    }
  };

  const hasEntryOnDate = (date: Date) => {
    return journalEntries.some(entry => isSameDay(entry.date, date));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 relative overflow-hidden">
      {/* Paper texture overlay */}
      <div 
        className="absolute inset-0 opacity-30"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23d4a574' fill-opacity='0.1'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='13' cy='43' r='1'/%3E%3Ccircle cx='47' cy='17' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }}
      />

      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header with vintage book cover design */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="relative bg-gradient-to-r from-amber-800 via-amber-700 to-amber-900 rounded-lg p-8 shadow-2xl border-4 border-amber-600">
            {/* Book spine effect */}
            <div className="absolute left-0 top-0 bottom-0 w-4 bg-gradient-to-b from-amber-900 to-amber-800 rounded-l-lg"></div>
            
            {/* Decorative corners */}
            <div className="absolute top-2 left-6 w-3 h-3 border-t-2 border-l-2 border-amber-400 rounded-tl-lg"></div>
            <div className="absolute top-2 right-2 w-3 h-3 border-t-2 border-r-2 border-amber-400 rounded-tr-lg"></div>
            <div className="absolute bottom-2 left-6 w-3 h-3 border-b-2 border-l-2 border-amber-400 rounded-bl-lg"></div>
            <div className="absolute bottom-2 right-2 w-3 h-3 border-b-2 border-r-2 border-amber-400 rounded-br-lg"></div>

            <div className="flex items-center justify-between text-amber-100">
              <div className="flex items-center space-x-4">
                <BookOpen className="h-12 w-12 text-amber-200" />
                <div>
                  <h1 className="text-3xl font-bold font-serif tracking-wide">Günlük Defterim</h1>
                  <p className="text-amber-200 font-medium">Anılarınızı kaydedin, düşüncelerinizi paylaşın</p>
                </div>
              </div>
              <div className="text-right">
                <p className="text-amber-200 text-sm font-medium">{format(today, "dd MMMM yyyy")}</p>
                <p className="text-amber-300 text-xs">Bugün</p>
              </div>
            </div>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content Area */}
          <div className="lg:col-span-2 space-y-6">
            {/* New Entry Button */}
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.1 }}
            >
              <Button 
                size="lg" 
                className="w-full h-16 text-lg font-medium bg-gradient-to-r from-amber-600 to-amber-700 hover:from-amber-700 hover:to-amber-800 shadow-lg border-2 border-amber-500"
              >
                <PenTool className="mr-3 h-6 w-6" />
                Yeni Günlük Yazısı Yaz
              </Button>
            </motion.div>

            {/* Recent Entries */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg border border-amber-200 p-6"
            >
              <h2 className="text-2xl font-bold text-amber-900 mb-4 flex items-center">
                <Clock className="mr-2 h-6 w-6" />
                Son Günlükler
              </h2>
              <div className="space-y-4">
                <AnimatePresence>
                  {recentEntries.map((entry, index) => (
                    <motion.div
                      key={entry.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200 hover:shadow-md transition-shadow cursor-pointer"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h3 className="font-semibold text-amber-900 mb-1">{entry.title}</h3>
                          <p className="text-amber-700 text-sm mb-2 line-clamp-2">{entry.content}</p>
                          <p className="text-amber-600 text-xs">{format(entry.date, "dd MMM yyyy")}</p>
                        </div>
                        {entry.mood && (
                          <div className={`w-3 h-3 rounded-full ${getMoodColor(entry.mood)} ml-3 mt-1`}></div>
                        )}
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </motion.div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Mini Calendar */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg border border-amber-200 p-6"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-amber-900 flex items-center">
                  <CalendarIcon className="mr-2 h-5 w-5" />
                  {format(currentMonth, "MMMM yyyy")}
                </h3>
                <div className="flex space-x-1">
                  <Button variant="ghost" size="icon" onClick={previousMonth} className="h-8 w-8">
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="icon" onClick={nextMonth} className="h-8 w-8">
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-7 gap-1 text-center text-xs font-medium text-amber-700 mb-2">
                {["Pz", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"].map(day => (
                  <div key={day} className="p-2">{day}</div>
                ))}
              </div>
              
              <div className="grid grid-cols-7 gap-1">
                {calendarDays.map((day, index) => {
                  const hasEntry = hasEntryOnDate(day);
                  const isCurrentMonth = isSameMonth(day, currentMonth);
                  const isDayToday = isToday(day);
                  
                  return (
                    <button
                      key={index}
                      onClick={() => setSelectedDate(day)}
                      className={cn(
                        "p-2 text-xs rounded-md transition-colors relative",
                        isCurrentMonth ? "text-amber-900" : "text-amber-400",
                        isDayToday && "bg-amber-600 text-white font-bold",
                        !isDayToday && "hover:bg-amber-100",
                        isSameDay(day, selectedDate) && !isDayToday && "bg-amber-200"
                      )}
                    >
                      {format(day, "d")}
                      {hasEntry && (
                        <div className="absolute bottom-0.5 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-amber-600 rounded-full"></div>
                      )}
                    </button>
                  );
                })}
              </div>
            </motion.div>

            {/* Stats Card */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg border border-amber-200 p-6"
            >
              <h3 className="text-lg font-semibold text-amber-900 mb-4">İstatistikler</h3>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-amber-700">Toplam Yazı:</span>
                  <span className="font-semibold text-amber-900">{journalEntries.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-amber-700">Bu Ay:</span>
                  <span className="font-semibold text-amber-900">
                    {journalEntries.filter(entry => isSameMonth(entry.date, today)).length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-amber-700">Yazma Serisi:</span>
                  <span className="font-semibold text-amber-900">5 gün</span>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function Component() {
  return <JournalDashboard />;
}
