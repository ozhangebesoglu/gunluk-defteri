name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: diary_app_test
          POSTGRES_USER: diary_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout kod
      uses: actions/checkout@v4

    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Bağımlılıkları yükle
      run: |
        npm ci
        cd frontend && npm ci && cd ..

    - name: Lint kontrolü
      run: npm run lint

    - name: Frontend build
      run: npm run build:frontend

    - name: Test veritabanı migration
      run: |
        export NODE_ENV=test
        export DB_HOST=localhost
        export DB_PORT=5432
        export DB_USER=diary_user
        export DB_PASSWORD=test_password
        export DB_NAME=diary_app_test
        npm run db:migrate

  build:
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4

    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Bağımlılıkları yükle
      run: |
        npm ci
        cd frontend && npm ci && cd ..

    - name: Frontend build
      run: npm run build:frontend

    - name: Electron build
      run: npm run build:electron

    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: dist-electron/*.AppImage

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist-electron/*.exe

    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: dist-electron/*.dmg

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-build
        path: ./releases/

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./releases/

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: ./releases/

    - name: GitHub Release oluştur
      uses: softprops/action-gh-release@v1
      with:
        files: releases/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Docker Buildx kurulumu
      uses: docker/setup-buildx-action@v3

    - name: GitHub Container Registry'ye giriş
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker build ve push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4

    - name: Node.js kurulumu
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Bağımlılıkları yükle
      run: npm ci

    - name: Security audit
      run: npm audit --audit-level=high

    - name: Dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'gunluk-defteri'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --nodeAuditSkipDevDependencies

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: reports/ 